// GENERATED CODE - DO NOT MODIFY BY HAND

part of 'tpv_object.dart';

// **************************************************************************
// JsonSerializableGenerator
// **************************************************************************

_$_TpvObject _$$_TpvObjectFromJson(Map<String, dynamic> json) => _$_TpvObject(
      gpsdClass: json['class'] as String,
      device: json['device'] as String?,
      mode: $enumDecode(_$NmeaModeEnumMap, json['mode']),
      status: $enumDecodeNullable(_$GpsFixStatusEnumMap, json['status']),
      time: const NullableDateTimeConverter().fromJson(json['time']),
      altitudeAboveEllipsoid: (json['altHAE'] as num?)?.toDouble(),
      mslAltitude: (json['altMSL'] as num?)?.toDouble(),
      alt: (json['alt'] as num?)?.toDouble(),
      climpRate: (json['climb'] as num?)?.toDouble(),
      datum: json['datum'] as String?,
      depth: (json['depth'] as num?)?.toDouble(),
      dgpsAge: (json['dgpsAge'] as num?)?.toDouble(),
      dgpsStation: (json['dgpsSta'] as num?)?.toDouble(),
      estimatedClimpError: (json['epc'] as num?)?.toDouble(),
      estimatedTrackError: (json['epd'] as num?)?.toDouble(),
      estimatedHorizontalPositionError: (json['eph'] as num?)?.toDouble(),
      estimatedSpeedError: (json['eps'] as num?)?.toDouble(),
      estimatedTimestampError: (json['ept'] as num?)?.toDouble(),
      estimatedLongitudeError: (json['epx'] as num?)?.toDouble(),
      estimatedLatitudeError: (json['epy'] as num?)?.toDouble(),
      estimatedVerticalError: (json['epv'] as num?)?.toDouble(),
      geoidSeparation: (json['geoidSep'] as num?)?.toDouble(),
      latitude: (json['lat'] as num?)?.toDouble(),
      leapseconds: json['leapseconds'] as int?,
      longitude: (json['lon'] as num?)?.toDouble(),
      track: (json['track'] as num?)?.toDouble(),
      magneticTrack: (json['magtrack'] as num?)?.toDouble(),
      magneticVariation: (json['magvar'] as num?)?.toDouble(),
      speed: (json['speed'] as num?)?.toDouble(),
      ecefxPosition: (json['ecefx'] as num?)?.toDouble(),
      ecefyPosition: (json['ecefy'] as num?)?.toDouble(),
      ecefzPosition: (json['ecefz'] as num?)?.toDouble(),
      ecefPositionError: (json['ecefpAcc'] as num?)?.toDouble(),
      ecefxVelocity: (json['ecefvx'] as num?)?.toDouble(),
      ecefvyVelocity: (json['ecefvy'] as num?)?.toDouble(),
      ecefvzVelocity: (json['ecefvz'] as num?)?.toDouble(),
      ecefVelocityError: (json['ecefvAcc'] as num?)?.toDouble(),
      estimatedSphericalPositionError: (json['sep'] as num?)?.toDouble(),
      downComponentOfRelativePositionVector: (json['relD'] as num?)?.toDouble(),
      eastComponentOfRelativePositionVector: (json['relE'] as num?)?.toDouble(),
      northComponentOfRelativePositionVector:
          (json['relN'] as num?)?.toDouble(),
      downComponentOfVelocity: (json['velD'] as num?)?.toDouble(),
      eastComponentOfVelocity: (json['velE'] as num?)?.toDouble(),
      northComponentOfVelocity: (json['velN'] as num?)?.toDouble(),
      windMagneticAngle: (json['wanglem'] as num?)?.toDouble(),
      windRelativeAngle: (json['wangler'] as num?)?.toDouble(),
      windTrueAngle: (json['wanglet'] as num?)?.toDouble(),
      windRelativeSpeed: (json['wspeedr'] as num?)?.toDouble(),
      windTrueSpeed: (json['wspeedt'] as num?)?.toDouble(),
    );

Map<String, dynamic> _$$_TpvObjectToJson(_$_TpvObject instance) =>
    <String, dynamic>{
      'class': instance.gpsdClass,
      'device': instance.device,
      'mode': _$NmeaModeEnumMap[instance.mode]!,
      'status': _$GpsFixStatusEnumMap[instance.status],
      'time': const NullableDateTimeConverter().toJson(instance.time),
      'altHAE': instance.altitudeAboveEllipsoid,
      'altMSL': instance.mslAltitude,
      'alt': instance.alt,
      'climb': instance.climpRate,
      'datum': instance.datum,
      'depth': instance.depth,
      'dgpsAge': instance.dgpsAge,
      'dgpsSta': instance.dgpsStation,
      'epc': instance.estimatedClimpError,
      'epd': instance.estimatedTrackError,
      'eph': instance.estimatedHorizontalPositionError,
      'eps': instance.estimatedSpeedError,
      'ept': instance.estimatedTimestampError,
      'epx': instance.estimatedLongitudeError,
      'epy': instance.estimatedLatitudeError,
      'epv': instance.estimatedVerticalError,
      'geoidSep': instance.geoidSeparation,
      'lat': instance.latitude,
      'leapseconds': instance.leapseconds,
      'lon': instance.longitude,
      'track': instance.track,
      'magtrack': instance.magneticTrack,
      'magvar': instance.magneticVariation,
      'speed': instance.speed,
      'ecefx': instance.ecefxPosition,
      'ecefy': instance.ecefyPosition,
      'ecefz': instance.ecefzPosition,
      'ecefpAcc': instance.ecefPositionError,
      'ecefvx': instance.ecefxVelocity,
      'ecefvy': instance.ecefvyVelocity,
      'ecefvz': instance.ecefvzVelocity,
      'ecefvAcc': instance.ecefVelocityError,
      'sep': instance.estimatedSphericalPositionError,
      'relD': instance.downComponentOfRelativePositionVector,
      'relE': instance.eastComponentOfRelativePositionVector,
      'relN': instance.northComponentOfRelativePositionVector,
      'velD': instance.downComponentOfVelocity,
      'velE': instance.eastComponentOfVelocity,
      'velN': instance.northComponentOfVelocity,
      'wanglem': instance.windMagneticAngle,
      'wangler': instance.windRelativeAngle,
      'wanglet': instance.windTrueAngle,
      'wspeedr': instance.windRelativeSpeed,
      'wspeedt': instance.windTrueSpeed,
    };

const _$NmeaModeEnumMap = {
  NmeaMode.unknown: 0,
  NmeaMode.noFix: 1,
  NmeaMode.twoDimensions: 2,
  NmeaMode.threeDimensions: 3,
};

const _$GpsFixStatusEnumMap = {
  GpsFixStatus.unknown: 0,
  GpsFixStatus.normal: 1,
  GpsFixStatus.dgps: 2,
  GpsFixStatus.rtkFixed: 3,
  GpsFixStatus.rtkFloating: 4,
  GpsFixStatus.dr: 5,
  GpsFixStatus.gnssdr: 6,
  GpsFixStatus.timeSurveyed: 7,
  GpsFixStatus.simulated: 8,
  GpsFixStatus.p: 9,
};
